<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" type="text/css" href="styleSecond.css" />
    <style type="text/css">
      hr {
        margin: 6px;
      }
      a {
        margin-left: 8px;
        text-decoration: none;
        color: #aaaaaa;
      }
      body {
        background-color: #c1cfc0;
      }

      video {
        display: block;
      }

      section {
        opacity: 1;
        transition: opacity 500ms ease-in-out;
      }
      .removed {
        display: none;
      }

      .invisible {
        opacity: 0.2;
      }

      .camView {
        position: relative;
        float: left;
        width: calc(100% - 20px);
        margin: 10px;
        cursor: pointer;
      }

      .camView p {
        position: absolute;
        padding: 5px;
        background-color: rgba(255, 111, 0, 0.85);
        color: #fff;
        border: 1px dashed rgba(255, 255, 255, 0.7);
        z-index: 2;
        font-size: 12px;
      }

      .highlighter {
        background: rgba(0, 255, 0, 0.25);
        border: 1px dashed #fff;
        z-index: 1;
        position: absolute;
      }
    </style>
  </head>
  <body onload="done()">
    <nav
      class="navbar navbar-expand-lg navbar-light bg-light"
      style="background-color: #e8f6e8 !important"
    >
      <div class="container-fluid">
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarTogglerDemo01"
          aria-controls="navbarTogglerDemo01"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>

        <a class="navbar-brand" href="#">Hidden brand</a>
        <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a
                class="nav-link active"
                aria-current="page"
                href="http://localhost:8080/home"
                >Home</a
              >
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Messages</a>
            </li>

            <li class="nav-item">
              <a class="nav-link" href="#">help</a>
            </li>
            <!-- <li class="nav-item">
          <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>
        </li> -->
          </ul>
          <form class="d-flex">
            <input
              class="form-control me-2"
              type="search"
              placeholder="Search"
              aria-label="Search"
            />
            <button class="btn btn-outline-success" type="submit">
              Search
            </button>
          </form>
        </div>
      </div>
    </nav>
    <br />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <!-- <div id="roll" class="spinner-grow" role="status" style="position: absolute; top: 50%; right: 50%;">
         <div class="sr-only"></div>
</div> -->
    <div
      class="spinner-border"
      style="display: block; margin-left: auto; margin-right: auto"
      id="gif"
      role="status"
    >
      <span class="sr-only"></span>
    </div>
    <div id="roll"></div>
    <section id="demos" class="invisible" style="visibility: hidden">
      <h3 style="text-align: center">
        <span id="score">0</span>% Matched with <span id="str2"><%=str%></span>
      </h3>
      <div id="liveView" class="camView">
        <button
          id="webcamButton"
          style="display: block; margin-left: auto; margin-right: auto"
        >
          Enable Webcam
        </button>
        <video
          id="webcam"
          autoplay
          width="640"
          height="480"
          style="display: block; margin-left: auto; margin-right: auto"
        ></video>
      </div>
    </section>
    <p style="visibility: hidden" id="id"><%=id%></p>
    <script
      src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js"
      type="text/javascript"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"></script>
    <!-- Import the page's JavaScript to do some stuff -->
    <!-- <script src="app.js" defer></script> -->
    <script type="text/javascript">
      const video = document.getElementById("webcam");
      const liveView = document.getElementById("liveView");
      const demosSection = document.getElementById("demos");
      const enableWebcamButton = document.getElementById("webcamButton");
      // Check if webcam access is supported.
      function getUserMediaSupported() {
        return !!(
          navigator.mediaDevices && navigator.mediaDevices.getUserMedia
        );
      }

      // If webcam supported, add event listener to button for when user
      // wants to activate it to call enableCam function which we will
      // define in the next step.
      if (getUserMediaSupported()) {
        enableWebcamButton.addEventListener("click", enableCam);
      } else {
        console.warn("getUserMedia() is not supported by your browser");
      }

      // Placeholder function for next step. Paste over this in the next step.
      function enableCam(event) {
        // Only continue if the COCO-SSD has finished loading.
        if (!model) {
          return;
        }

        // Hide the button once clicked.
        event.target.classList.add("removed");

        // getUsermedia parameters to force video but not audio.
        const constraints = {
          video: true,
        };
        // Activate the webcam stream.
        navigator.mediaDevices
          .getUserMedia(constraints)
          .then(function (stream) {
            video.srcObject = stream;
            video.addEventListener("loadeddata", predictWebcam);
          });
      }
      function predictWebcam() {}

      // Pretend model has loaded so we can try out the webcam code.
      var model = true;
      demosSection.classList.remove("invisible");
      var model = undefined;

      // Before we can use COCO-SSD class we must wait for it to finish
      // loading. Machine Learning models can be large and take a moment
      // to get everything needed to run.
      // Note: cocoSsd is an external object loaded from our index.html
      // script tag import so ignore any warning in Glitch.
      cocoSsd.load().then(function (loadedModel) {
        document.getElementById("gif").remove();
        model = loadedModel;
        // Show demo section now model is ready to use.
        demosSection.classList.remove("invisible");
      });
      var children = [];
      let score = document.getElementById("score");
      function predictWebcam() {
        // Now let's start classifying a frame in the stream.
        model.detect(video).then(function (predictions) {
          // Remove any highlighting we did previous frame.
          for (let i = 0; i < children.length; i++) {
            liveView.removeChild(children[i]);
          }
          children.splice(0);

          // Now lets loop through predictions and draw them to the live view if
          // they have a high confidence score.
          for (let n = 0; n < predictions.length; n++) {
            // If we are over 66% sure we are sure we classified it right, draw it!
            if (predictions[n].score > 0.66) {
              let ss = predictions[n].score * 100;
              ss = parseInt(ss);
              score.innerText = `${ss}`;
              const p = document.createElement("p");
              p.innerText = predictions[n].class;
              p.style =
                "margin-left: " +
                predictions[n].bbox[0] +
                "px; margin-top: " +
                (predictions[n].bbox[1] - 10) +
                "px; width: " +
                (predictions[n].bbox[2] - 10) +
                "px; top: 0; left: 0;";

              const highlighter = document.createElement("div");
              highlighter.setAttribute("class", "highlighter");
              highlighter.style =
                "left: " +
                predictions[n].bbox[0] +
                "px; top: " +
                predictions[n].bbox[1] +
                "px; width: " +
                predictions[n].bbox[2] +
                "px; height: " +
                predictions[n].bbox[3] +
                "px;";
              var match = document.getElementById("str2").innerText;
              if (p.innerText === match) {
                console.log(ss);
                document.getElementById("roll").innerHTML =
                  '<form id="dynForm"  method="POST"><input type="hidden"</form>';
                document.getElementById("dynForm").submit();
              }
              liveView.appendChild(highlighter);
              liveView.appendChild(p);
              children.push(highlighter);
              children.push(p);
            }
          }

          // Call this function again to keep predicting when the browser is ready.
          window.requestAnimationFrame(predictWebcam);
        });
      }
      function done() {
        document.getElementById("roll").innerHTML = " ";
        document.getElementById("demos").style.visibility = "visible";
      }
    </script>
  </body>
</html>
